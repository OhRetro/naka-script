# Test

var test_ = null

func add(a, b) -> a + b

func add(a, b)
    a + b
end

test_ = if 5 == 5 then "ok" else "not ok"
print(test_)

if 5 == 5 then; print("ok"); print("works"); else print("not ok")

if 5 == 5 then
    print("ok")
    print("works")
else 
    print("not ok")
end

var numbers = null

test_ = 1; numbers = for i = 1 to 10 then test_ = test_ * i
print(test_)
print(numbers)

test_ = 1
for i = 1 to 10 then 
    test_ = test_ * i
end
print(test_)

test_ = 1; numbers = while test_ < 10 then test_ = test_ + 1
print(test_)
print(numbers)

test_ = 1
while test_ < 10 then 
    test_ = test_ + 1
end
print(test_)

test_ = 1
while test_ < 10 then 
    test_ = test_ + 1
    if test_ == 5 then
        continue
    end
end
print(test_)

test_ = 1
while test_ < 10 then 
    test_ = test_ + 1
    if test_ == 5 then
        break
    end
end
print(test_)

var testA = func() -> 5
print(testA())

func testB()
    var foo = 5
    return foo
end
print(testB())

func noReturn()
    var a = 0
end

print(noReturn())

func hello()
    print("hello world")
end

func runFunction(function) -> function()
func returnFunction(function) -> function

runFunction(hello)

(returnFunction(hello))()
returnFunction(hello)()

var helloworld = "hello world"
print(helloworld[0])
print(helloworld[6])

func range(end_point)
    return for i = 0 to end_point then i
end

print(range(10))

var name = "None"
name = "Joe"

print(name)

# Testing syntaxes like this
var alphabet = {
    a
    : 
    0
    ,

    b
    
    :
    
    1

    ,
    c: 2
    
}
print(alphabet)

var randomList = [
    1
    ,

    "test"

    ,
    [1]
]
print(randomList)

if 5 == 5 then
    print(
        "ok"
    )
    print(
        range(
            10
        )
    )
end

run("../strings.ns")
test_ = import("../importing.ns")

# print(test_["fibonacci"](40))

var _variable = "test"
var pi = 3.14
print(pi)

func showPi()
    var pi = 3.1415926536
    print(pi)
end

showPi()
print(pi)

delvar pi

#showPi.abc

print(alphabet["c"])

var list = ["a", "b", "c"]
var dict = {a: 1, b: 2, c: 3}

# print(["1", "2", "3"][1] = "4")

print(list)
list[1] = "d"
print(list)
print(list[1])

print(dict)
dict["b"] = 4
print(dict)
print(dict["b"])

dict["d"] = 4
print(dict)

dict - "b"
# delvar dict["b"]
print(dict)

list - 1
# delvar list[1]
print(list)

const constDict = {test: "1"}

#constDict["test"] = "hey"

#print(constDict["test"])
print(constDict)

var dict_ = constDict 
# but the dict object still in a read-only state

#dict_["test"] = "hey"
print(dict_)
print(constDict) # test

# Test